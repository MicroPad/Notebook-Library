// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Translators Json toMarkdownFromJupyter should convert to the correct markdown 1`] = `
"# Lists
## Creating a list



* A string is a sequence of characters

* A list contains a sequence of any type

* A list is denoted with brackets [ and ]

* Can contain a nested list

\`\`\`
mylist = [\\"a\\", \\"b\\", \\"c\\"]

print (mylist)

print (len(mylist))

print (mylist[0])

--------------------
Output:
['a', 'b', 'c']
3
a

--------------------
\`\`\`

\`\`\`
vocabulary = [\\"iteration\\", \\"selection\\", \\"control\\"]

numbers = [17, 123]

empty = []

mixedlist = [\\"hello\\", 2.0, 5*2, [10, 20]]



print (numbers)

print (mixedlist)

print (empty)

newlist = [numbers, vocabulary,['test string', 'and' ,'another']]

print (newlist)


--------------------
Output:
[17, 123]
['hello', 2.0, 10, [10, 20]]
[]
[[17, 123], ['iteration', 'selection', 'control'], ['test string', 'and', 'another']]

--------------------
\`\`\`

\`\`\`
print (len(newlist))

--------------------
Output:
3

--------------------
\`\`\`
## Common operations



* \`len\` returns the length of the list 

* concatentation (\`+\`) and repetition (\`*\`)

   * _creates new list objects_

* access elements (\`[i]\` where \`i=>0\`)

* slicing (\`[i:j]\` for elements between \`i\` and up to but not including \`j\`)

* membership tests (\`a in b\`)


\`\`\`
browncoats = [\\"Zoe\\", \\"Malcolm\\"]

crew = [\\"Hoban\\", \\"Kaylee\\"]

passengers = [\\"River\\", \\"Shepherd\\", \\"Simon\\", \\"Inara\\"]

cargo = [\\"Contrabrand\\"]

print (len(passengers))

print (len(cargo))

print('hello')

--------------------
Output:
4
1
hello

--------------------
\`\`\`

\`\`\`
firefly = browncoats + crew + passengers

firefly
\`\`\`

\`\`\`
firefly = firefly + cargo*2

print (firefly)

--------------------
Output:
['Zoe', 'Malcolm', 'Hoban', 'Kaylee', 'River', 'Shepherd', 'Simon', 'Inara', 'Contrabrand', 'Contrabrand']

--------------------
\`\`\`

\`\`\`
firefly[0]
\`\`\`

\`\`\`
firefly[-3]
\`\`\`

\`\`\`
print (firefly[1:3])

firefly[1:3][0]

--------------------
Output:
['Malcolm', 'Hoban']

--------------------
\`\`\`

\`\`\`
if 'River' in firefly:

    print (firefly)

--------------------
Output:
['Zoe', 'Malcolm', 'Hoban', 'Kaylee', 'River', 'Shepherd', 'Simon', 'Inara', 'Contrabrand', 'Contrabrand']

--------------------
\`\`\`

\`\`\`
if 'River' not in browncoats:

    print ('moo')

--------------------
Output:
moo

--------------------
\`\`\`
## Lists are mutable objects



>Unlike strings, you can modify lists.

\`\`\`
# Replace a value

firefly[1] = \\"Kirk\\"

print (firefly)

--------------------
Output:
['Zoe', 'Kirk', 'Hoban', 'Kaylee', 'River', 'Shepherd', 'Simon', 'Inara', 'Contrabrand', 'Contrabrand']

--------------------
\`\`\`
>Del deletes elements

\`\`\`
print(firefly)

del firefly[0]

print(firefly)

--------------------
Output:
['Zoe', 'Kirk', 'Hoban', 'Kaylee', 'River', 'Shepherd', 'Simon', 'Inara', 'Contrabrand', 'Contrabrand']
['Kirk', 'Hoban', 'Kaylee', 'River', 'Shepherd', 'Simon', 'Inara', 'Contrabrand', 'Contrabrand']

--------------------
\`\`\`

\`\`\`
del firefly[2:4]

print(firefly)

--------------------
Output:
['Kirk', 'Hoban', 'Shepherd', 'Simon', 'Inara', 'Contrabrand', 'Contrabrand']

--------------------
\`\`\`

\`\`\`
del firefly[-2:]

print(firefly)

--------------------
Output:
['Kirk', 'Hoban', 'Shepherd', 'Simon', 'Inara']

--------------------
\`\`\`
> Lists can be considered objects.

**Objects** are like animals: they know how to do stuff (like eat and sleep), they know how to interact with others (like make children), and they have characteristics (like height, weight).



> \\"Knowing how to do stuff\\" with itself is called a method. In this case \\"append\\" is a method which, when invoked, is an action that changes the characteristics (the data vector of the list itself).
> Append is used to add new elements to the list

\`\`\`
firefly.append(\\"Reaver\\")

firefly.append([\\"Reaver\\", \\"Spock\\"]) # inserts a list

print(firefly)


--------------------
Output:
['Kirk', 'Hoban', 'Shepherd', 'Simon', 'Inara', 'Reaver', ['Reaver', 'Spock']]

--------------------
\`\`\`
> Extending the list allows new elements from another list to be added

\`\`\`
firefly.extend([\\"Sulu\\", \\"McCoy\\"]) 

print(firefly)

--------------------
Output:
['Kirk', 'Hoban', 'Shepherd', 'Simon', 'Inara', 'Reaver', ['Reaver', 'Spock'], 'Sulu', 'McCoy']

--------------------
\`\`\`
> Another way to extend a list is using the addition operator

\`\`\`
firefly += [\\"Uhura\\"] # this is almost the same as extend but doesn't use a function call so its slightly faster

print(firefly)

--------------------
Output:
['Kirk', 'Hoban', 'Shepherd', 'Simon', 'Inara', 'Reaver', ['Reaver', 'Spock'], 'Sulu', 'McCoy', 'Uhura']

--------------------
\`\`\`
> We can also treat a list a bit like a queue, remove the last element 

\`\`\`
print(firefly)

whatwaspopped = firefly.pop()

print(whatwaspopped)

--------------------
Output:
['Kirk', 'Hoban', 'Shepherd', 'Simon', 'Inara', 'Reaver', ['Reaver', 'Spock'], 'Sulu', 'McCoy', 'Uhura']
Uhura

--------------------
\`\`\`
> ... or remove the first element (or any we like as indicated by the index)

\`\`\`
firefly.pop(0)
\`\`\`
> We can also insert elements at arbitrary points

\`\`\`
firefly.insert(1, \\"Zaphod\\")

print(firefly)

--------------------
Output:
['Hoban', 'Zaphod', 'Shepherd', 'Simon', 'Inara', 'Reaver', ['Reaver', 'Spock'], 'Sulu', 'McCoy']

--------------------
\`\`\`
## Copying Lists

\`\`\`
a = [1,2,3]

print(a)

--------------------
Output:
[1, 2, 3]

--------------------
\`\`\`

\`\`\`
b = a

print (b)

--------------------
Output:
[1, 2, 3]

--------------------
\`\`\`

\`\`\`
a[0] = 'change'

print (a)

print (b)

--------------------
Output:
['change', 2, 3]
['change', 2, 3]

--------------------
\`\`\`

\`\`\`
a = [1,2,3]

b = a[:] # clone a

print (b)

--------------------
Output:
[1, 2, 3]

--------------------
\`\`\`

\`\`\`
a[0] = 'test'

print (a)

print (b)

--------------------
Output:
['test', 2, 3]
[1, 2, 3]

--------------------
\`\`\`
## Searching, sorting, & counting
* sort a list in ascending or descending order

* find the index of a given element

* count the number of matching elements

* remove a given element

\`\`\`
v = [1, 3, 2, 3, 4, 2]

v.sort()

print(v)

--------------------
Output:
[1, 2, 2, 3, 3, 4]

--------------------
\`\`\`
> \`reverse\` is a keyword of the \`.sort()\` method

\`\`\`
v.sort(reverse=True)

print(v)

--------------------
Output:
[4, 3, 3, 2, 2, 1]

--------------------
\`\`\`
> \`.sort()\` changes the the list in place but does NOT return it

\`\`\`
v = [1,1,1,1,5,5,3,2,4,2]

test = v.sort()

print (v)

print (test)

--------------------
Output:
[1, 1, 1, 1, 2, 2, 3, 4, 5, 5]
None

--------------------
\`\`\`
>Count will return how many times something is featured in a list

\`\`\`
print (v.count(1))

print (v.count(2))

print (v.count(3))

--------------------
Output:
4
2
1

--------------------
\`\`\`
>Remove removes a value from the list but doesn't return it

\`\`\`
num = v.remove(3)

print (num)

print (v)

--------------------
Output:
None
[1, 1, 1, 1, 2, 2, 4, 5, 5]

--------------------
\`\`\`
## Iterating Over Lists
Iterate over the items in the list can be done in a number of ways. 
>If you want to know the index of each item you can use enumerate()

\`\`\`
a = ['cat', 'window', 'defenestrate']

for x, val in enumerate(a):

       print(x,val)

--------------------
Output:
0 cat
1 window
2 defenestrate

--------------------
\`\`\`
>Or if you don't care about the index, just use a for loop

\`\`\`
for val in a:

    print (val)

--------------------
Output:
cat
window
defenestrate

--------------------
\`\`\`
>Or you can create a for loop using the length of the list

\`\`\`
for x in range(0, len(a)):

    print(x,a[x]) 

--------------------
Output:
0 cat
1 window
2 defenestrate

--------------------
\`\`\`

\`\`\`
a = ['Mary', 'had', 'a', 'little', 'lamb']

for i in range(len(a)):

    print (i, a[i])

--------------------
Output:
0 Mary
1 had
2 a
3 little
4 lamb

--------------------
\`\`\`
>The range() function returns a sequence of numbers: from START to STOP by STEP

\`\`\`
a = [1,2,3,4,5,6,7,8,9,10]

print (a)

for z in range(1, 10, 2): # from 1 to 10 each step is 2

    print (a[z])

--------------------
Output:
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
2
4
6
8
10

--------------------
\`\`\`
Iterating backwards is done with 'reversed()'

\`\`\`
for z in range(1, 10, 2): # from 1 to 10 each step is 2

    print (z)



print ('backwards:')

for z in reversed(range(1, 10, 2)): # from 1 to 10 each step is 2

    print (z)

--------------------
Output:
1
3
5
7
9
backwards:
9
7
5
3
1

--------------------
\`\`\`
## Casting Back and Forth
> Take a simple list

\`\`\`
a = [1,2,3,(\\"b\\",1)]

print (a)

print (type(a))

--------------------
Output:
[1, 2, 3, ('b', 1)]
<class 'list'>

--------------------
\`\`\`
> Convert it to a tuple (immutable list -- a list with values you can't change)

\`\`\`
b = tuple(a)

print (b)

print (type(b))

--------------------
Output:
(1, 2, 3, ('b', 1))
<class 'tuple'>

--------------------
\`\`\`
> Convert it back to a list

\`\`\`
c = list(b)

print (c)

print (type(c))

--------------------
Output:
[1, 2, 3, ('b', 1)]
<class 'list'>

--------------------
\`\`\`
> Convert it to a set (an unordered collection of unique elements)

\`\`\`
d = set(a)

print (d)

print (type(d))

--------------------
Output:
{('b', 1), 1, 2, 3}
<class 'set'>

--------------------
\`\`\`
> Make a list out of a set

\`\`\`
print (set('spam'))

print (list(set(\\"spam\\")))

--------------------
Output:
{'m', 's', 'a', 'p'}
['m', 's', 'a', 'p']

--------------------
\`\`\`
> Make a list out of a string

\`\`\`
list(\\"abracadabra\\")
\`\`\`
> casting only affects top-level structure, not the elements 
## The split function

>VERY useful. Split strings based on a delimeter (e.g. split on \\" \\", or \\",\\", or \\"\\\\n\\")

\`\`\`
\\"Kirk Spock  McCoy\\".split()
\`\`\`
> Then you can join it back together with a delimter

\`\`\`
''.join([\\"1\\",\\"2\\",\\"3\\"])
\`\`\`

\`\`\`
text = \\"These,are,comma,seperated\\"

print (text)

textlist = text.split(\\",\\")

print (textlist)

print (\\" \\".join(textlist))

print (\\"\\\\t\\".join(textlist))

--------------------
Output:
These,are,comma,seperated
['These', 'are', 'comma', 'seperated']
These are comma seperated
These	are	comma	seperated

--------------------
\`\`\`
## List Comprehension ##



You can create lists \\"on the fly\\" by asking simple questions of other iterateable data structures. Although the following examples are somewhat trivial, this can be extremely powerful and is a very useful tool.
>example: I want a list of squared numbers

\`\`\`
# You can make the list of squared numbers using a loop:

mylist = []

for num in range(10):

    mylist.append(num**2)

print (mylist)

--------------------
Output:
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

--------------------
\`\`\`

\`\`\`
# or you can do it inline like so:

mylist= [x**2 for x in range(10)]

print (mylist)

--------------------
Output:
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

--------------------
\`\`\`
>example: I want a list of all mesons whose masses are between 100 and 1000 MeV

\`\`\`
particles = \\\\

[{\\"name\\":\\"π+\\"  ,\\"mass\\": 139.57018}, {\\"name\\":\\"π0\\"  ,\\"mass\\": 134.9766}, 

 {\\"name\\":\\"η5\\"  ,\\"mass\\": 47.853}, {\\"name\\":\\"η′(958)\\",\\"mass\\": 957.78}, 

 {\\"name\\":\\"ηc(1S)\\", \\"mass\\": 2980.5}, {\\"name\\": \\"ηb(1S)\\",\\"mass\\": 9388.9}, 

 {\\"name\\":\\"K+\\",  \\"mass\\": 493.677}, {\\"name\\":\\"K0\\"  ,\\"mass\\": 497.614}, 

 {\\"name\\":\\"K0S\\" ,\\"mass\\":  497.614}, {\\"name\\":\\"K0L\\" ,\\"mass\\":  497.614},

 {\\"name\\":\\"D+\\"  ,\\"mass\\": 1869.62}, {\\"name\\":\\"D0\\"  ,\\"mass\\": 1864.84},

 {\\"name\\":\\"D+s\\" ,\\"mass\\":  1968.49}, {\\"name\\":\\"B+\\"  ,\\"mass\\": 5279.15},

 {\\"name\\":\\"B0\\"  ,\\"mass\\": 5279.5}, {\\"name\\":\\"B0s\\" ,\\"mass\\":  5366.3},

 {\\"name\\":\\"B+c\\" ,\\"mass\\":    6277}]



# data source: http://en.wikipedia.org/wiki/List_of_mesons



my_mesons = [ (x['name'],x['mass']) for x in particles if x['mass'] <= 1000.0 and x['mass'] >= 100.0]

print (my_mesons)

--------------------
Output:
[('π+', 139.57018), ('π0', 134.9766), ('η′(958)', 957.78), ('K+', 493.677), ('K0', 497.614), ('K0S', 497.614), ('K0L', 497.614)]

--------------------
\`\`\`

\`\`\`
# get the average

tot = 0.0

for x in my_mesons: 

    tot += x[1]

print (\\"The average meson mass in this range is \\" + str(tot/len(my_mesons)) + \\" MeV/c^2.\\")

--------------------
Output:
The average meson mass in this range is 459.83511142857145 MeV/c^2.

--------------------
\`\`\`

\`\`\`
my_mesons[0][0]
\`\`\`
 &nbsp;
"
`;
